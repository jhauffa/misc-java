package edu.tum.cs.jhauffa.stat;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import org.apache.commons.math3.linear.RealMatrix;
import org.junit.Test;

public class VectorAutoregressiveModelTest {

	// dataset "Canada" from R package "VARS" (https://cran.r-project.org/web/packages/vars)
	private static final double[][] data = {
		{ 929.6105, 405.3665, 386.1361, 7.53 },
		{ 929.804, 404.6398, 388.1358, 7.7 },
		{ 930.3184, 403.8149, 390.5401, 7.47 },
		{ 931.4277, 404.2158, 393.9638, 7.27 },
		{ 932.662, 405.0467, 396.7647, 7.37 },
		{ 933.5509, 404.4167, 400.0217, 7.13 },
		{ 933.5315, 402.8191, 400.7515, 7.4 },
		{ 933.0769, 401.9773, 405.7335, 8.33 },
		{ 932.1238, 402.0897, 409.0504, 8.83 },
		{ 930.6359, 401.3067, 411.3984, 10.43 },
		{ 929.0971, 401.6302, 413.0194, 12.2 },
		{ 928.5633, 401.5638, 415.167, 12.77 },
		{ 929.0694, 402.8157, 414.6621, 12.43 },
		{ 930.2655, 403.1421, 415.7319, 12.23 },
		{ 931.677, 403.0786, 416.2315, 11.7 },
		{ 932.139, 403.7188, 418.1439, 11.2 },
		{ 932.2767, 404.8668, 419.7352, 11.27 },
		{ 932.8328, 405.6362, 420.4842, 11.47 },
		{ 933.7334, 405.1363, 420.9309, 11.3 },
		{ 934.1772, 406.0246, 422.1124, 11.17 },
		{ 934.5928, 406.4123, 423.6278, 11 },
		{ 935.6067, 406.3009, 423.9887, 10.63 },
		{ 936.5111, 406.3354, 424.1902, 10.27 },
		{ 937.4201, 406.7737, 426.127, 10.2 },
		{ 938.4159, 405.1525, 426.8578, 9.67 },
		{ 938.9992, 404.9298, 426.7457, 9.6 },
		{ 939.2354, 404.5765, 426.8858, 9.6 },
		{ 939.6795, 404.1995, 428.8403, 9.5 },
		{ 940.2497, 405.9499, 430.1223, 9.5 },
		{ 941.4358, 405.8221, 430.2307, 9.03 },
		{ 942.2981, 406.4463, 430.393, 8.7 },
		{ 943.5322, 407.0512, 432.0284, 8.13 },
		{ 944.349, 407.946, 433.3886, 7.87 },
		{ 944.8215, 408.1796, 433.9641, 7.67 },
		{ 945.0671, 408.5998, 434.4844, 7.8 },
		{ 945.8067, 409.0906, 436.1569, 7.73 },
		{ 946.8697, 408.7042, 438.2651, 7.57 },
		{ 946.8766, 408.9803, 438.7636, 7.57 },
		{ 947.2497, 408.3287, 439.9498, 7.33 },
		{ 947.6513, 407.8857, 441.8359, 7.57 },
		{ 948.184, 407.2605, 443.1769, 7.63 },
		{ 948.3492, 406.7752, 444.3592, 7.6 },
		{ 948.0322, 406.1794, 444.5236, 8.17 },
		{ 947.1065, 405.4398, 446.9694, 9.2 },
		{ 946.0796, 403.28, 450.1586, 10.17 },
		{ 946.1838, 403.3649, 451.5464, 10.33 },
		{ 946.2258, 403.3807, 452.2984, 10.4 },
		{ 945.9978, 404.0032, 453.1201, 10.37 },
		{ 945.5183, 404.4774, 453.9991, 10.6 },
		{ 945.3514, 404.7868, 454.9552, 11 },
		{ 945.2918, 405.271, 455.4824, 11.4 },
		{ 945.4008, 405.383, 456.1009, 11.73 },
		{ 945.9058, 405.1564, 457.2027, 11.07 },
		{ 945.9035, 406.47, 457.3886, 11.67 },
		{ 946.319, 406.2293, 457.7799, 11.47 },
		{ 946.5796, 406.7265, 457.5535, 11.3 },
		{ 946.78, 408.5785, 458.8024, 10.97 },
		{ 947.6283, 409.6767, 459.0564, 10.63 },
		{ 948.6221, 410.3858, 459.1578, 10.1 },
		{ 949.3992, 410.5395, 459.7037, 9.67 },
		{ 949.9481, 410.4453, 459.7037, 9.53 },
		{ 949.7945, 410.6256, 460.0258, 9.47 },
		{ 949.9534, 410.8672, 461.0257, 9.5 },
		{ 950.2502, 411.2359, 461.3039, 9.27 },
		{ 950.538, 410.6637, 461.4031, 9.5 },
		{ 950.7871, 410.8085, 462.9277, 9.43 },
		{ 950.8695, 412.116, 464.6888, 9.7 },
		{ 950.9281, 412.9994, 465.0717, 9.9 },
		{ 951.8457, 412.9551, 464.2851, 9.43 },
		{ 952.6005, 412.8241, 464.0344, 9.3 },
		{ 953.5976, 413.0489, 463.4535, 8.87 },
		{ 954.1434, 413.611, 465.0717, 8.77 },
		{ 954.5426, 413.6048, 466.0889, 8.6 },
		{ 955.2631, 412.9684, 466.6171, 8.33 },
		{ 956.0561, 412.2659, 465.7478, 8.17 },
		{ 956.7966, 412.9106, 465.8995, 8.03 },
		{ 957.3865, 413.8294, 466.4099, 7.9 },
		{ 958.0634, 414.2242, 466.9552, 7.87 },
		{ 958.7166, 415.1678, 467.6281, 7.53 },
		{ 959.4881, 415.7016, 467.7026, 6.93 },
		{ 960.3625, 416.8674, 469.1348, 6.8 },
		{ 960.7834, 417.6104, 469.3364, 6.7 },
		{ 961.029, 418.003, 470.0117, 6.93 },
		{ 961.7657, 417.2667, 469.6472, 6.87 }
	};

	private static final double[][] expCoeff = {
		{ -192.56361, 1.17353629, 0.14479389, -0.07904568, 0.5243814 },
		{ -81.5511, 0.0870951, 1.0197007, -0.02629309, 0.3229925 },
		{ 11.61376, 0.06381103, -0.13551199, 0.96872851, -0.1953848 },
		{ 186.80892, -0.19293575, -0.08086896, 0.07538624, 0.4753098 }
	};
	private static final double[][] expErrCov = {
		{ 0.2272849, 0.05243455, -0.10162904, -0.13877461 },
		{ 0.05243455, 0.47296939, 0.02583478, -0.02875834 },
		{ -0.10162904, 0.02583478, 0.61492551, 0.07989306 },
		{ -0.13877461, -0.02875834, 0.07989306, 0.12712307 }
	};

	@Test
	public void testParameterFitting() {
		// transpose data
		double[][] dataMatrix = new double[data[0].length][data.length];
		for (int i = 0; i < data.length; i++) {
			for (int j = 0; j < data[i].length; j++)
				dataMatrix[j][i] = data[i][j];
		}

		VectorAutoregressiveModel var = VectorAutoregressiveModel.fit(dataMatrix);
		RealMatrix coeff = var.getCoefficients();
		assertEquals(expCoeff.length, coeff.getRowDimension());
		for (int i = 0; i < coeff.getRowDimension(); i++)
			assertArrayEquals(expCoeff[i], coeff.getRow(i), 1E-2);
		RealMatrix errCov = var.getErrorCovariance();
		assertEquals(expErrCov.length, errCov.getRowDimension());
		for (int i = 0; i < errCov.getRowDimension(); i++)
			assertArrayEquals(expErrCov[i], errCov.getRow(i), 1E-5);
	}

}
